import { TicketStatus, TicketPriority, ServiceType } from './enums';
import { Client } from './Client';
import { Technician } from './Technician';

/**
 * Ticket entity type definition
 * Converted from Java Ticket model
 */
export interface Ticket {
  id: number;
  title: string;
  description: string;
  serviceType: ServiceType;
  status: TicketStatus;
  priority: TicketPriority;
  clientId: number;
  clientName?: string;
  clientEmail?: string;
  assignedTechnicianId?: number;
  createdAt: string; // ISO date string
  updatedAt: string; // ISO date string
  dueAt?: string; // ISO date string
  resolvedAt?: string; // ISO date string
  overdue?: boolean;
  assigned?: boolean;
  // Navigation properties (may be included in responses)
  client?: Client;
  assignedTechnician?: Technician;
}

/**
 * Ticket creation request type
 * Note: Server only accepts description, serviceType, clientId, and dueAt
 * Title and priority are auto-generated by the server
 */
export interface TicketCreateRequest {
  description: string;
  serviceType: ServiceType;
  clientId: number;
  // Backend now accepts optional priority on create
  priority?: TicketPriority;
}

/**
 * Ticket update request type
 */
export interface TicketUpdateRequest {
  title?: string;
  description?: string;
  serviceType?: ServiceType;
  status?: TicketStatus;
  priority?: TicketPriority;
  assignedTechnicianId?: number;
  dueAt?: string; // ISO date string
  resolvedAt?: string; // ISO date string
}

/**
 * Ticket assignment request type
 */
export interface TicketAssignmentRequest {
  technicianId: number; // Server expects 'technicianId', not 'assignedTechnicianId'
}

/**
 * Ticket with computed properties for display
 */
export interface TicketDisplay extends Ticket {
  formattedDueDate: string;
  priorityIndicator: string;
  isOpen: boolean;
  isClosed: boolean;
  isOverdue: boolean;
  isAssigned: boolean;
}

/**
 * Utility functions for Ticket operations
 */
export const TicketUtils = {
  /**
   * Check if ticket is open
   */
  isOpen: (ticket: Ticket): boolean => {
    return ticket.status === TicketStatus.OPEN;
  },

  /**
   * Check if ticket is closed
   */
  isClosed: (ticket: Ticket): boolean => {
    return ticket.status === TicketStatus.CLOSED;
  },

  /**
   * Check if ticket is overdue
   */
  isOverdue: (ticket: Ticket): boolean => {
    // Use the overdue field from API if available
    if (ticket.overdue !== undefined) {
      return ticket.overdue;
    }
    
    // Fallback to computing based on status and due date
    return TicketUtils.isOpen(ticket) && 
           ticket.dueAt !== undefined && 
           new Date(ticket.dueAt) < new Date();
  },

  /**
   * Check if ticket is assigned
   */
  isAssigned: (ticket: Ticket): boolean => {
    // Use the assigned field from API if available
    if (ticket.assigned !== undefined) {
      return ticket.assigned;
    }
    
    // Fallback to checking technician assignment
    return ticket.assignedTechnician !== undefined || ticket.assignedTechnicianId !== undefined;
  },

  /**
   * Get formatted due date
   */
  getFormattedDueDate: (ticket: Ticket): string => {
    if (!ticket.dueAt) return 'N/A';
    const date = new Date(ticket.dueAt);
    return date.toLocaleDateString('en-US', { 
      month: 'short', 
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  },

  /**
   * Get priority indicator with emoji
   */
  getPriorityIndicator: (ticket: Ticket): string => {
    if (TicketUtils.isOverdue(ticket)) return 'ðŸ”´ OVERDUE';
    if (TicketUtils.isOpen(ticket) && !TicketUtils.isAssigned(ticket)) return 'ðŸŸ¡ UNASSIGNED';
    if (TicketUtils.isOpen(ticket)) return 'ðŸŸ¢ ACTIVE';
    return 'âœ… CLOSED';
  },

  /**
   * Get priority color for UI
   */
  getPriorityColor: (priority: TicketPriority): string => {
    switch (priority) {
      case TicketPriority.URGENT:
        return 'red';
      case TicketPriority.HIGH:
        return 'orange';
      case TicketPriority.MEDIUM:
        return 'yellow';
      case TicketPriority.LOW:
        return 'green';
      default:
        return 'gray';
    }
  },

  /**
   * Get status color for UI
   */
  getStatusColor: (ticket: Ticket): string => {
    if (TicketUtils.isOverdue(ticket)) return 'red';
    if (TicketUtils.isOpen(ticket)) return 'blue';
    return 'green';
  }
};